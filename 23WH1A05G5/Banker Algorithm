#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_PROCESSES 100
#define MAX_RESOURCES 100

int allocation[MAX_PROCESSES][MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
int available[MAX_RESOURCES];

void calculateNeed(int processes, int resources) {
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

bool isSafe(int processes, int resources) {
    int work[MAX_RESOURCES];
    bool finish[MAX_PROCESSES] = {false};
    int safeSequence[MAX_PROCESSES];
    int count = 0;

    // Initialize work with available resources
    for (int i = 0; i < resources; i++) {
        work[i] = available[i];
    }

    while (count < processes) {
        bool found = false;
        for (int p = 0; p < processes; p++) {
            if (!finish[p]) {
                // Check if the process can be completed
                int j;
                printf("Checking process P%d...\n", p);
                for (j = 0; j < resources; j++) {
                    if (need[p][j] > work[j]) {
                        printf("Process P%d cannot be completed. Need exceeds available resources.\n", p);
                        break;
                    }
                }
                // If all resources needed are available
                if (j == resources) {
                    // Simulate the allocation of resources
                    printf("Process P%d can be completed. Allocating resources...\n", p);
                    for (int k = 0; k < resources; k++) {
                        work[k] += allocation[p][k];
                    }
                    safeSequence[count++] = p; // Add process to safe sequence
                    finish[p] = true; // Mark process as finished
                    printf("Process P%d finished. Resources updated:\n", p);
                    for (int k = 0; k < resources; k++) {
                        printf("R%d: %d ", k, work[k]);
                    }
                    printf("\n");
                    found = true;
                }
            }
        }
        // If no process could be found, the system is not in a safe state
        if (!found) {
            printf("System is not in a safe state.\n");
            return false;
        }
    }

    // If we reach here, the system is in a safe state
    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < processes; i++) {
        printf("P%d ", safeSequence[i]);
    }
    printf("\n");
    return true;
}

int main() {
    int processes, resources;

    // Get the number of processes and resources from the user
    printf("Enter the number of processes: ");
    scanf("%d", &processes);
    printf("Enter the number of resources: ");
    scanf("%d", &resources);

    // Initialize allocation matrix
    printf("Enter allocation matrix:\n");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Initialize max matrix
    printf("Enter max matrix:\n");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Initialize available resources
    printf("Enter available resources:\n");
    for (int i = 0; i < resources; i++) {
        scanf("%d", &available[i]);
    }

    // Calculate the need matrix
    calculateNeed(processes, resources);

    // Print each process's resource allocation, max requirement, and need
    printf("\nProcess\tAllocation\tMax\t\tNeed\n");
    for (int i = 0; i < processes; i++) {
        printf("P%d\t", i);
        for (int j = 0; j < resources; j++) {
            printf("%d ", allocation[i][j]);
        }
        printf("\t\t");
        for (int j = 0; j < resources; j++) {
            printf("%d ", max[i][j]);
        }
        printf("\t\t");
        for (int j = 0; j < resources; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    // Print the available resources
    printf("\nAvailable resources:\n");
    for (int i = 0; i < resources; i++) {
        printf("R%d: %d\n", i, available[i]);
    }

    // Check if the system is in a safe state
    isSafe(processes, resources);

    return 0;
}
