BHAVISHYA MADINENI23wh1a05e7@bvrithyderabad.edu.in10:47 AM GMT+5:30
You created this chat on Tuesday, Mar 11
.
Space update:
History is on
Messages sent with history on are saved
Tuesday, Mar 11
You,
Mar 11, 10:57 AM
,
#include <stdio.h>
#include <stdlib.h>

int full = 0;
int empty = 10;
int mutex = 1;
int x = 0;

void wait(int *S) {
    while (*S <= 0);  // Busy waiting
    (*S)--;
}

void signal(int *S) {
    (*S)++;
}

void producer() {
    wait(&empty);
    wait(&mutex);
    x++;
    printf("\nProducer produces item %d", x);
    signal(&full);
    signal(&mutex);
}

void consumer() {
    wait(&full);
    wait(&mutex);
    printf("\nConsumer consumes item %d", x);
    x--;
    signal(&empty);
    signal(&mutex);
}

int main() {
    int n, i;
    printf("\n1. Press 1 for Producer"
           "\n2. Press 2 for Consumer"
           "\n3. Press 3 for Exit");

    for (i = 1; i > 0; i++) {
        printf("\nEnter your choice: ");
        scanf("%d", &n);

        switch (n) {
        case 1:
            if (mutex == 1 && empty != 0) {
                producer();
            } else {
                printf("\nBuffer is full!");
            }
            break;

        case 2:
            if (mutex == 1 && full != 0) {
                consumer();
            } else {
                printf("\nBuffer is empty!");
            }
            break;

        case 3:
            exit(0);
            break;
        }
    }
}
, Mar 11, 10:57 AM
,
Today
BHAVISHYA MADINENI,
9:41 AM
,
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>

#define FIFO1 "fifo1"
#define FIFO2 "fifo2"
#define BUFFER_SIZE 100

int main() {
    int fd_write, fd_read;
    char write_msg[BUFFER_SIZE], read_msg[BUFFER_SIZE];

   
    mkfifo(FIFO1, 0666);
    mkfifo(FIFO2, 0666);

   
    fd_write = open(FIFO1, O_WRONLY);
    if (fd_write == -1) {
        perror("open write");
        exit(1);
    }

   
    fd_read = open(FIFO2, O_RDONLY);
    if (fd_read == -1) {
        perror("open read");
        exit(1);
    }

   
    printf("Enter message: ");
    fgets(write_msg, BUFFER_SIZE, stdin);
    write(fd_write, write_msg, strlen(write_msg) + 1);

     read(fd_read, read_msg, BUFFER_SIZE);
    printf("Received from Reader: %s", read_msg);

   
    close(fd_write);
    close(fd_read);

    return 0;
}
, 9:41 AM
,
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>

#define FIFO1 "fifo1"
#define FIFO2 "fifo2"
#define BUFFER_SIZE 100

int main() {
    int fd_read, fd_write;
    char read_msg[BUFFER_SIZE], write_msg[BUFFER_SIZE];

   
    mkfifo(FIFO1, 0666);
    mkfifo(FIFO2, 0666);

   
    fd_read = open(FIFO1, O_RDONLY);
    if (fd_read == -1) {
        perror("open read");
        exit(1);
    }

   
    fd_write = open(FIFO2, O_WRONLY);
    if (fd_write == -1) {
        perror("open write");
        exit(1);
    }

   
    read(fd_read, read_msg, BUFFER_SIZE);
    printf("Received from Writer: %s", read_msg);

   
    printf("Enter reply: ");
    fgets(write_msg, BUFFER_SIZE, stdin);
    write(fd_write, write_msg, strlen(write_msg) + 1);

   
    close(fd_read);
    close(fd_write);

    return 0;
}
, 9:43 AM
,
BHAVISHYA MADINENI,
33 min
,
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>

// Structure for message queue
struct msg_buffer {
    long msg_type;
    char msg_text[100];
};

int main() {
    key_t key;
    int msgid;
    struct msg_buffer message;

    // Generate unique key
    key = ftok("progfile", 65);

    // Create message queue and return identifier
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget failed");
        exit(1);
    }

    message.msg_type = 1;  // Message type
    printf("Enter message: ");
    fgets(message.msg_text, sizeof(message.msg_text), stdin);
    message.msg_text[strcspn(message.msg_text, "\n")] = 0; // Remove newline

    // Send message
    if (msgsnd(msgid, &message, sizeof(message.msg_text), 0) == -1) {
        perror("msgsnd failed");
        exit(1);
    }

    printf("Message sent: %s\n", message.msg_text);
    return 0;
}
, 33 min
,
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>

// Structure for message queue
struct msg_buffer {
    long msg_type;
    char msg_text[100];
};

int main() {
    key_t key;
    int msgid;
    struct msg_buffer message;

    // Generate unique key
    key = ftok("progfile", 65);

    // Get message queue
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget failed");
        exit(1);
    }

    // Receive message
    if (msgrcv(msgid, &message, sizeof(message.msg_text), 1, 0) == -1) {
        perror("msgrcv failed");
        exit(1);
    }

    printf("Received message: %s\n", message.msg_text);

    // Destroy message queue
    msgctl(msgid, IPC_RMID, NULL);

    return 0;
}
, 32 min
,
BHAVISHYA MADINENI,
25 min
,
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>

#define SHM_SIZE 1024  // Shared memory size

int main() {
    key_t key;
    int shmid;
    char *shm_addr;

    // Generate a unique key
    key = ftok("shmfile", 65);
    
    // Create shared memory segment
    shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT);
    if (shmid == -1) {
        perror("shmget failed");
        exit(1);
    }

    // Attach shared memory segment
    shm_addr = (char *) shmat(shmid, NULL, 0);
    if (shm_addr == (char *)(-1)) {
        perror("shmat failed");
        exit(1);
    }

    // Write to shared memory
    printf("Enter a message: ");
    fgets(shm_addr, SHM_SIZE, stdin);
    shm_addr[strcspn(shm_addr, "\n")] = 0; // Remove newline

    printf("Data written to shared memory: %s\n", shm_addr);

    // Detach from shared memory
    shmdt(shm_addr);

    return 0;
}
, 25 min
,
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024  // Shared memory size

int main() {
    key_t key;
    int shmid;
    char *shm_addr;

    // Generate a unique key
    key = ftok("shmfile", 65);
    
    // Locate shared memory segment
    shmid = shmget(key, SHM_SIZE, 0666);
    if (shmid == -1) {
        perror("shmget failed");
        exit(1);
    }

    // Attach shared memory segment
    shm_addr = (char *) shmat(shmid, NULL, 0);
    if (shm_addr == (char *)(-1)) {
        perror("shmat failed");
        exit(1);
    }

    // Read from shared memory
    printf("Data read from shared memory: %s\n", shm_addr);

    // Detach from shared memory
    shmdt(shm_addr);

    // Destroy shared memory
    shmctl(shmid, IPC_RMID, NULL);

    return 0;
}
