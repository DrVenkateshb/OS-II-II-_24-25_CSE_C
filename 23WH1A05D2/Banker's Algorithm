#include <stdio.h>

int main() {
    int p, c;
    printf("Enter number of processes: ");
    scanf("%d", &p);
    
    printf("Enter number of resources: ");
    scanf("%d", &c);

    int count = 0, i, j;
    int alc[p][c], max[p][c], need[p][c];
    int safe[p], available[c], done[p];

    printf("Enter allocation of resources (%dx%d matrix):\n", p, c);
    for (i = 0; i < p; i++) {
        for (j = 0; j < c; j++) {
            scanf("%d", &alc[i][j]);
        }
    }

    printf("Enter maximum resources required (%dx%d matrix):\n", p, c);
    for (i = 0; i < p; i++) {
        for (j = 0; j < c; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    printf("Enter available resources:\n");
    for (i = 0; i < c; i++) {
        printf("%c: ", 65 + i);
        scanf("%d", &available[i]);
    }

    printf("\nNeed matrix:\n");
    printf("Process\t");
    for (i = 0; i < c; i++) {
        printf("%c\t", 65 + i);
    }
    printf("\n");

    for (i = 0; i < p; i++) {
        printf("P%d\t", i);
        for (j = 0; j < c; j++) {
            need[i][j] = max[i][j] - alc[i][j];
            printf("%d\t", need[i][j]);
        }
        printf("\n");
    }

    // Initialize done array
    for (i = 0; i < p; i++) {
        done[i] = 0;
    }

    int flag;
    while (count < p) {
        flag = 0;
        for (i = 0; i < p; i++) {
            if (done[i] == 0) {
                int can_allocate = 1;
                for (j = 0; j < c; j++) {
                    if (need[i][j] > available[j]) {
                        can_allocate = 0;
                        break;
                    }
                }

                if (can_allocate) {
                    safe[count++] = i;
                    done[i] = 1;
                    for (j = 0; j < c; j++) {
                        available[j] += alc[i][j];
                    }
                    flag = 1; // Found at least one process
                }
            }
        }
        if (flag == 0) {
            printf("\nSystem is in unsafe state. Safe sequence does not exist.\n");
            return 0;
        }
    }

    printf("\nSystem is in safe state.\n");
    printf("Safe sequence: ");
    for (i = 0; i < p; i++) {
        printf("P%d ", safe[i]);
        if (i != p - 1)
            printf("-> ");
    }
    printf("\n");

    printf("\nAvailable resources after completion:\n");
    for (i = 0; i < c; i++) {
        printf("%c: %d\n", 65 + i, available[i]);
    }

    return 0;
}
