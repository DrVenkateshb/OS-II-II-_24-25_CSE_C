#include <stdio.h>
#include <limits.h>

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int p[n], at[n], bt[n], ct[n], tat[n], wt[n], completed[n];
    float total_tat = 0, total_wt = 0;

    printf("Enter Arrival Time and Burst Time for each process:\n");
    for (int i = 0; i < n; i++) {
        p[i] = i + 1;
        printf("Process %d: ", p[i]);
        scanf("%d %d", &at[i], &bt[i]);
        completed[i] = 0;  // Mark process as not completed
    }

    int currentTime = 0, completedProcesses = 0;

    while (completedProcesses < n) {
        int shortestJob = -1;
        int minBurstTime = INT_MAX;

        // Find the process with the shortest burst time that has arrived
        for (int i = 0; i < n; i++) {
            if (!completed[i] && at[i] <= currentTime && bt[i] < minBurstTime) {
                minBurstTime = bt[i];
                shortestJob = i;
            }
        }

        // If no process is found, CPU is idle, move to the next arrival
        if (shortestJob == -1) {
            currentTime++;
            continue;
        }

        // Process execution
        currentTime += bt[shortestJob];
        ct[shortestJob] = currentTime;
        tat[shortestJob] = ct[shortestJob] - at[shortestJob];
        wt[shortestJob] = tat[shortestJob] - bt[shortestJob];
        completed[shortestJob] = 1;  // Mark process as completed
        completedProcesses++;

        total_tat += tat[shortestJob];
        total_wt += wt[shortestJob];
    }

    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i], at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    printf("\nAverage Turnaround Time: %.2f", total_tat / n);
    printf("\nAverage Waiting Time: %.2f\n", total_wt / n);

    return 0;
}
