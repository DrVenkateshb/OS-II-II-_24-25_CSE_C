
#include <stdio.h>
void calculateWaitingTime(int n, int arrivalTime[], int burstTime[], int waitingTime[]) {
    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        if (currentTime < arrivalTime[i]) {
            currentTime = arrivalTime[i];
        }
        waitingTime[i] = currentTime - arrivalTime[i];
        if (waitingTime[i] < 0) {
            waitingTime[i] = 0;
        }
        currentTime += burstTime[i];
    }
}
void calculateTurnaroundTime(int n, int burstTime[], int waitingTime[], int turnaroundTime[]) {
    for (int i = 0; i < n; i++) {
        turnaroundTime[i] = waitingTime[i] + burstTime[i];
    }
}
void sortByPriorityAndArrival(int n, int process[], int arrivalTime[], int burstTime[], int priority[]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (priority[i] > priority[j] || (priority[i] == priority[j] && arrivalTime[i] > arrivalTime[j])) {
                int temp = priority[i];
                priority[i] = priority[j];
                priority[j] = temp;
                temp = arrivalTime[i];
                arrivalTime[i] = arrivalTime[j];
                arrivalTime[j] = temp;
                temp = burstTime[i];
                burstTime[i] = burstTime[j];
                burstTime[j] = temp;
                temp = process[i];
                process[i] = process[j];
                process[j] = temp;
            }
        }
    }
}
void displayResults(int n, int process[], int arrivalTime[], int burstTime[], int priority[], int waitingTime[], int turnaroundTime[]) {
    printf("Process\tArrival Time\tPriority\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", process[i], arrivalTime[i], priority[i], burstTime[i], waitingTime[i], turnaroundTime[i]);
    }
}
void displayAverages(int n, int waitingTime[], int turnaroundTime[]) {
    double totalWaitingTime = 0, totalTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }
    printf("\nAverage Waiting Time: %.2lf\n", totalWaitingTime / n);
    printf("Average Turnaround Time: %.2lf\n", totalTurnaroundTime / n);
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    int process[n], arrivalTime[n], burstTime[n], priority[n];
    int waitingTime[n], turnaroundTime[n];
    for (int i = 0; i < n; i++) {
        process[i] = i + 1;
        printf("Enter arrival time for process P%d: ", process[i]);
        scanf("%d", &arrivalTime[i]);
        printf("Enter burst time for process P%d: ", process[i]);
        scanf("%d", &burstTime[i]);
        printf("Enter priority for process P%d: ", process[i]);
        scanf("%d", &priority[i]);
    }
    sortByPriorityAndArrival(n, process, arrivalTime, burstTime, priority);
    calculateWaitingTime(n, arrivalTime, burstTime, waitingTime);
    calculateTurnaroundTime(n, burstTime, waitingTime, turnaroundTime);
    displayResults(n, process, arrivalTime, burstTime, priority, waitingTime, turnaroundTime);
    displayAverages(n, waitingTime, turnaroundTime);

    return 0;
}

 
