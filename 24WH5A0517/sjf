#include <stdio.h>
struct Process {
    int id;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
};
void sort_processes(struct Process p[], int n) {
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].burst_time > p[j].burst_time || (p[i].burst_time == p[j].burst_time && p[i].arrival_time > p[j].arrival_time)) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}
void calculate_times(struct Process p[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    p[0].waiting_time = 0;
    for (int i = 1; i < n; i++) {
        p[i].waiting_time = p[i - 1].waiting_time + p[i - 1].burst_time - p[i].arrival_time;
        if (p[i].waiting_time < 0) {
            p[i].waiting_time = 0;
        }
    }
    for (int i = 0; i < n; i++) {
        p[i].turnaround_time = p[i].burst_time + p[i].waiting_time;
    }
    for (int i = 0; i < n; i++) {
        total_waiting_time += p[i].waiting_time;
        total_turnaround_time += p[i].turnaround_time;
    }
    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}
void display_processes(struct Process p[], int n) {
    printf("\nProcess ID  Burst Time  Arrival Time  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%-12d%-12d%-14d%-14d%-16d\n", p[i].id, p[i].burst_time, p[i].arrival_time, p[i].waiting_time, p[i].turnaround_time);
    }
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter burst time for process %d: ", p[i].id);
        scanf("%d", &p[i].burst_time);
        printf("Enter arrival time for process %d: ", p[i].id);
        scanf("%d", &p[i].arrival_time);
    }
    sort_processes(p, n);
    calculate_times(p, n);
    display_processes(p, n);
    return 0;
}
