#include <stdio.h>

struct Process {
    int processID;
    int burstTime;
    int arrivalTime;
    int priority;
    int waitingTime;
    int turnAroundTime;
};

void sortByArrivalTime(struct Process p[], int n) {
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].arrivalTime > p[j].arrivalTime) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}

void sortByPriority(struct Process p[], int n) {
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].priority > p[j].priority) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}

void calculateWaitingAndTurnaroundTimes(struct Process p[], int n) {
    p[0].waitingTime = 0;
    for (int i = 1; i < n; i++) {
        p[i].waitingTime = p[i - 1].waitingTime + p[i - 1].burstTime - p[i].arrivalTime;
        if (p[i].waitingTime < 0) {
            p[i].waitingTime = 0;
        }
    }

    for (int i = 0; i < n; i++) {
        p[i].turnAroundTime = p[i].burstTime + p[i].waitingTime;
    }
}

void calculateAverageTimes(struct Process p[], int n) {
    float totalWaitingTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitingTime += p[i].waitingTime;
        totalTurnAroundTime += p[i].turnAroundTime;
    }
    printf("\nAverage waiting time = %.2f", totalWaitingTime / n);
    printf("\nAverage turn-around time = %.2f\n", totalTurnAroundTime / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].processID = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].burstTime);
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &p[i].arrivalTime);
        printf("Enter priority for process %d: ", i + 1);
        scanf("%d", &p[i].priority);
    }

    sortByArrivalTime(p, n);
    sortByPriority(p, n);

    calculateWaitingAndTurnaroundTimes(p, n);

    printf("\nPriority Scheduling:\n");
    printf("Processes | Burst Time | Arrival Time | Priority | Waiting Time | Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("   %d      |     %d     |      %d      |    %d    |      %d      |      %d\n",
               p[i].processID, p[i].burstTime, p[i].arrivalTime, p[i].priority,
               p[i].waitingTime, p[i].turnAroundTime);
    }

    calculateAverageTimes(p, n);

    return 0;
}




