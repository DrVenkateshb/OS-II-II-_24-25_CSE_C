#include <stdio.h>

struct Process {
    int processID;
    int burstTime;
    int remainingBurstTime;
    int arrivalTime;
    int waitingTime;
    int turnAroundTime;
};

void calculateWaitingAndTurnaroundTimes(struct Process p[], int n) {
    for (int i = 0; i < n; i++) {
        p[i].remainingBurstTime = p[i].burstTime;
        p[i].waitingTime = 0;
    }

    int completed = 0, time = 0;
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (p[i].remainingBurstTime > 0) {
                if (p[i].remainingBurstTime <= 2) {
                    time += p[i].remainingBurstTime;
                    p[i].waitingTime = time - p[i].arrivalTime - p[i].burstTime;
                    p[i].remainingBurstTime = 0;
                    completed++;
                } else {
                    time += 2;
                    p[i].remainingBurstTime -= 2;
                }
            }
        }
    }

    for (int i = 0; i < n; i++) {
        p[i].turnAroundTime = p[i].burstTime + p[i].waitingTime;
    }
}

void calculateAverageTimes(struct Process p[], int n) {
    float totalWaitingTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitingTime += p[i].waitingTime;
        totalTurnAroundTime += p[i].turnAroundTime;
    }
    printf("\nAverage waiting time = %.2f", totalWaitingTime / n);
    printf("\nAverage turn-around time = %.2f\n", totalTurnAroundTime / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].processID = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].burstTime);
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &p[i].arrivalTime);
    }

    calculateWaitingAndTurnaroundTimes(p, n);

    printf("\nRound Robin Scheduling (Quantum = 2):\n");
    printf("Processes | Burst Time | Waiting Time | Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("   %d      |     %d     |      %d      |      %d\n",
               p[i].processID, p[i].burstTime, p[i].waitingTime, p[i].turnAroundTime);
    }

    calculateAverageTimes(p, n);

    return 0;
}
